[
	{
		"title": "COUNT() 函数",
		"type": "SQL",
		"birthtime": "2018-3-7 10:47:32",
		"path": "./pages/44、COUNT() 函数.html",
		"typePath": "./types/SQL.html",
		"wordCount": 581,
		"firstnode": "<h2>COUNT() 函数</h2><p><code>COUNT()</code> 函数返回匹配指定条件的行数。</p>"
	},
	{
		"title": "FIRST() 函数",
		"type": "SQL",
		"birthtime": "2018-3-7 11:32:29",
		"path": "./pages/45、FIRST() 函数.html",
		"typePath": "./types/SQL.html",
		"wordCount": 708,
		"firstnode": "<h2>FIRST() 函数</h2><p>返回指定的列中第一个记录的值。</p>"
	},
	{
		"title": "函数",
		"type": "SQL",
		"birthtime": "2018-3-7 10:32:10",
		"path": "./pages/42、函数.html",
		"typePath": "./types/SQL.html",
		"wordCount": 343,
		"firstnode": "<h2>函数</h2><p>SQL 拥有很多可用于计数和计算的内建函数。</p>"
	},
	{
		"title": "AVG() 函数",
		"type": "SQL",
		"birthtime": "2018-3-7 10:36:54",
		"path": "./pages/43、AVG() 函数.html",
		"typePath": "./types/SQL.html",
		"wordCount": 463,
		"firstnode": "<h2>AVG() 函数</h2><p>AVG() 函数返回数值列的平均值。</p>"
	},
	{
		"title": "栈",
		"type": "算法",
		"birthtime": "2017-12-15 09:07:26",
		"path": "./pages/栈.html",
		"typePath": "./types/算法.html",
		"wordCount": 341,
		"firstnode": "<h2>栈的定义</h2><p>栈是一种遵从后进先出原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端叫做栈底。在栈里，新元素都靠近栈顶，旧元素都靠近栈底。</p>"
	},
	{
		"title": "排序和搜索",
		"type": "算法",
		"birthtime": "2017-12-21 14:38:07",
		"path": "./pages/排序和搜索算法.html",
		"typePath": "./types/算法.html",
		"wordCount": 1612,
		"firstnode": "<h2>排序和搜索算法</h2><h3>用来表示待排序和搜索的数据结构</h3>"
	},
	{
		"title": "树",
		"type": "算法",
		"birthtime": "2017-12-18 17:02:13",
		"path": "./pages/树.html",
		"typePath": "./types/算法.html",
		"wordCount": 1755,
		"firstnode": "<h2>树的相关概念</h2><ul>\n<li>一个树结构包含一系列存在父子关系的节点。</li>\n<li>每个节点都有一个父节点（除了顶部的第一个节点）以及零个或多个子节点</li>\n<li>位于树顶部的节点叫做根节点，它没有父节点</li>\n<li>树中的每个元素都叫做节点\n<ul>\n<li>节点分为外部节点和内部节点</li>\n<li>至少有一个子节点的节点为内部节点</li>\n<li>没有子元素的节点称为外部节点或叶节点</li>\n</ul>\n</li>\n<li>一个节点可以有祖先和后代\n<ul>\n<li>一个节点（除了根节点）的祖先包括，父节点、祖父节点、曾祖父节点等</li>\n<li>一个节点的后代包括子节点、孙子节点、曾孙节点等</li>\n</ul>\n</li>\n<li>子树\n<ul>\n<li>由节点和它的后代构成</li>\n</ul>\n</li>\n<li>节点的深度\n<ul>\n<li>取决于他的祖先节点的数量</li>\n</ul>\n</li>\n<li>树的高度\n<ul>\n<li>取决于所有节点深度的最大值 。</li>\n</ul>\n</li>\n</ul>"
	},
	{
		"title": "图",
		"type": "算法",
		"birthtime": "2017-12-19 17:05:22",
		"path": "./pages/图.html",
		"typePath": "./types/算法.html",
		"wordCount": 2897,
		"firstnode": "<h2>图的相关概念</h2><ul>\n<li>图，是网络结构的抽象模型。</li>\n<li>图，是一组由边连接的节点（或顶点）。</li>\n<li>任何二元关系都可以用图来表示</li>\n</ul>"
	},
	{
		"title": "字典和散列表",
		"type": "算法",
		"birthtime": "2017-12-18 15:56:17",
		"path": "./pages/字典和散列表.html",
		"typePath": "./types/算法.html",
		"wordCount": 1496,
		"firstnode": "<h2>集合、字典、散列表</h2><ul>\n<li>都可以存储不重复的值</li>\n<li>集合，每个值作为主要元素</li>\n<li>字典、散列表，以 [ 键， 值 ] 对的形式存储数据</li>\n<li>字典、散列表各自的实现方式有所不同</li>\n</ul>"
	},
	{
		"title": "队列",
		"type": "算法",
		"birthtime": "2017-12-15 10:41:49",
		"path": "./pages/队列.html",
		"typePath": "./types/算法.html",
		"wordCount": 608,
		"firstnode": "<h2>队列的定义</h2><p>队列是遵循先进先出原则的一组有序的项。队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p>"
	},
	{
		"title": "集合",
		"type": "算法",
		"birthtime": "2017-12-18 14:42:55",
		"path": "./pages/集合.html",
		"typePath": "./types/算法.html",
		"wordCount": 1352,
		"firstnode": "<h2>集合的定义</h2><p>集合是由一组无序且唯一（即不能重复）的项组成的。这个数据结构使用了与有限集合相同的数学概念。</p>"
	},
	{
		"title": "算法补充知识",
		"type": "算法",
		"birthtime": "2017-12-21 16:17:46",
		"path": "./pages/算法补充知识.html",
		"typePath": "./types/算法.html",
		"wordCount": 1391,
		"firstnode": "<h2>递归</h2><p>递归，是一种解决问题的方法。通过解决问题的各个小部分，直到解决最初的大问题。通常涉及函数调用自身。</p>"
	},
	{
		"title": "链表",
		"type": "算法",
		"birthtime": "2017-12-17 11:29:16",
		"path": "./pages/链表.html",
		"typePath": "./types/算法.html",
		"wordCount": 1330,
		"firstnode": "<h2>链表的定义</h2><p>​链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。</p>"
	},
	{
		"title": "FORMAT() 函数",
		"type": "SQL",
		"birthtime": "2018-3-7 17:14:30",
		"path": "./pages/58、FORMAT() 函数.html",
		"typePath": "./types/SQL.html",
		"wordCount": 733,
		"firstnode": "<h2>FORMAT() 函数</h2><p>用于对字段的显示进行格式化。</p>"
	},
	{
		"title": "NOW() 函数",
		"type": "SQL",
		"birthtime": "2018-3-7 17:09:52",
		"path": "./pages/57、NOW() 函数.html",
		"typePath": "./types/SQL.html",
		"wordCount": 687,
		"firstnode": "<h2>NOW() 函数</h2><p>返回当前系统的日期和时间。</p>"
	}
]