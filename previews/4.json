{
	"0": {
		"title": "第五章 页面布局",
		"type": "CSS",
		"birthtime": "2018-1-14 17:02:43",
		"birthtimeMs": 1515920563831.2896,
		"path": "./pages/第五章 页面布局.html",
		"firstnode": "<h2>布局的基本概念</h2><p>多栏布局有三种基本的实现方案：固定宽度、流动、弹性。</p>"
	},
	"1": {
		"title": "第四章 字体和文本",
		"type": "CSS",
		"birthtime": "2018-1-9 09:23:49",
		"birthtimeMs": 1515461029995.3179,
		"path": "./pages/第四章 字体和文本.html",
		"firstnode": "<h2>字体</h2><p>网页中的字体有三个来源：</p>"
	},
	"2": {
		"title": "第三章 定位元素",
		"type": "CSS",
		"birthtime": "2018-1-5 10:27:35",
		"birthtimeMs": 1515119255061.3503,
		"path": "./pages/第三章 定位元素.html",
		"firstnode": "<h2>理解盒模型</h2><p>盒模型，就是浏览器为页面中的每个 HTML 元素生成的矩形盒子。<br>\n每一个元素都会在页面上生成一个盒子。因此，HTML 页面实际上就是由一堆盒子组成的。<br></p>"
	},
	"3": {
		"title": "第二章 CSS 工作原理",
		"type": "CSS",
		"birthtime": "2017-12-26 11:21:37",
		"birthtimeMs": 1514258497065.9841,
		"path": "./pages/第二章 CSS 工作原理.html",
		"firstnode": "<h2>剖析 CSS 规则</h2><p>规则是一条完整的CSS 指令。规则声明了要修改的元素和要应用给该元素\n的样式。</p>"
	},
	"4": {
		"title": "HTML 标记与文档结构",
		"type": "CSS",
		"birthtime": "2017-12-22 14:02:25",
		"birthtimeMs": 1513922545140.7903,
		"path": "./pages/第一章 HTML 标记与文档结构.html",
		"firstnode": "<h2>HTML 标记基础</h2><h3>文本用闭合标签</h3>"
	},
	"5": {
		"title": "算法补充知识",
		"type": "算法",
		"birthtime": "2017-12-21 16:17:46",
		"birthtimeMs": 1513844266126.5613,
		"path": "./pages/算法补充知识.html",
		"firstnode": "<h2>递归</h2><p>递归，是一种解决问题的方法。通过解决问题的各个小部分，直到解决最初的大问题。通常涉及函数调用自身。</p>"
	},
	"6": {
		"title": "排序和搜索",
		"type": "算法",
		"birthtime": "2017-12-21 14:38:07",
		"birthtimeMs": 1513838287673.3328,
		"path": "./pages/排序和搜索算法.html",
		"firstnode": "<h2>排序和搜索算法</h2><h3>用来表示待排序和搜索的数据结构</h3>"
	},
	"7": {
		"title": "图",
		"type": "算法",
		"birthtime": "2017-12-19 17:05:22",
		"birthtimeMs": 1513674322467.304,
		"path": "./pages/图.html",
		"firstnode": "<h2>图的相关概念</h2><ul>\n<li>图，是网络结构的抽象模型。</li>\n<li>图，是一组由边连接的节点（或顶点）。</li>\n<li>任何二元关系都可以用图来表示</li>\n</ul>"
	},
	"8": {
		"title": "树",
		"type": "算法",
		"birthtime": "2017-12-18 17:02:13",
		"birthtimeMs": 1513587733318.8699,
		"path": "./pages/树.html",
		"firstnode": "<h2>树的相关概念</h2><ul>\n<li>一个树结构包含一系列存在父子关系的节点。</li>\n<li>每个节点都有一个父节点（除了顶部的第一个节点）以及零个或多个子节点</li>\n<li>位于树顶部的节点叫做根节点，它没有父节点</li>\n<li>树中的每个元素都叫做节点\n<ul>\n<li>节点分为外部节点和内部节点</li>\n<li>至少有一个子节点的节点为内部节点</li>\n<li>没有子元素的节点称为外部节点或叶节点</li>\n</ul>\n</li>\n<li>一个节点可以有祖先和后代\n<ul>\n<li>一个节点（除了根节点）的祖先包括，父节点、祖父节点、曾祖父节点等</li>\n<li>一个节点的后代包括子节点、孙子节点、曾孙节点等</li>\n</ul>\n</li>\n<li>子树\n<ul>\n<li>由节点和它的后代构成</li>\n</ul>\n</li>\n<li>节点的深度\n<ul>\n<li>取决于他的祖先节点的数量</li>\n</ul>\n</li>\n<li>树的高度\n<ul>\n<li>取决于所有节点深度的最大值 。</li>\n</ul>\n</li>\n</ul>"
	},
	"9": {
		"title": "字典和散列表",
		"type": "算法",
		"birthtime": "2017-12-18 15:56:17",
		"birthtimeMs": 1513583777671.4087,
		"path": "./pages/字典和散列表.html",
		"firstnode": "<h2>集合、字典、散列表</h2><ul>\n<li>都可以存储不重复的值</li>\n<li>集合，每个值作为主要元素</li>\n<li>字典、散列表，以 [ 键， 值 ] 对的形式存储数据</li>\n<li>字典、散列表各自的实现方式有所不同</li>\n</ul>"
	},
	"10": {
		"title": "集合",
		"type": "算法",
		"birthtime": "2017-12-18 14:42:55",
		"birthtimeMs": 1513579375738.297,
		"path": "./pages/集合.html",
		"firstnode": "<h2>集合的定义</h2><p>集合是由一组无序且唯一（即不能重复）的项组成的。这个数据结构使用了与有限集合相同的数学概念。</p>"
	},
	"11": {
		"title": "链表",
		"type": "算法",
		"birthtime": "2017-12-17 11:29:16",
		"birthtimeMs": 1513481356403.6675,
		"path": "./pages/链表.html",
		"firstnode": "<h2>链表的定义</h2><p>​链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。</p>"
	},
	"12": {
		"title": "队列",
		"type": "算法",
		"birthtime": "2017-12-15 10:41:49",
		"birthtimeMs": 1513305709717.6423,
		"path": "./pages/队列.html",
		"firstnode": "<h2>队列的定义</h2><p>队列是遵循先进先出原则的一组有序的项。队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p>"
	},
	"13": {
		"title": "栈",
		"type": "算法",
		"birthtime": "2017-12-15 09:07:26",
		"birthtimeMs": 1513300046435.1738,
		"path": "./pages/栈.html",
		"firstnode": "<h2>栈的定义</h2><p>栈是一种遵从后进先出原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端叫做栈底。在栈里，新元素都靠近栈顶，旧元素都靠近栈底。</p>"
	}
}